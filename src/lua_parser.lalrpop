use std::str::FromStr;
use crate::ast::{Program, Function, Statement, Expression, Term, Operation, TableConstructionIndex};

grammar;

pub Program: Program = {
    <body: (<Statement>)*> => body,
}

Statement: Statement = {
    "return" <e:Expression> => Statement::Return(e),
    "local" <Identifier> "=" <Expression> => Statement::Local(<>),

    "if" <Expression> "then" <(<Statement>)*> <("elseif" <Expression> "then" <(<Statement>)*>)*> <("else" <(<Statement>)*>)?> "end" =>
        Statement::If(<>),

    "for" <Identifier> "=" <Expression> "," <Expression> <("," <Expression>)?> "do" <(<Statement>)*> "end" =>
        Statement::NumericFor(<>),

    "function" <name:Identifier> "(" <parameters:ParameterList> ")" <body: (<Statement>)*> "end" =>
        Statement::Function(Function { name, parameters, body }),

    <Expression> "=" <Expression> => Statement::Assignment(<>),
    <e:Expression> => Statement::Expression(e),
}

Expression: Box<Expression> = {
    #[precedence(level="0")]
    Term,

    #[precedence(level="1")]
    <Expression> "." <Identifier> => Box::new(Expression::Dot(<>)),
    <Expression> "[" <Expression> "]" => Box::new(Expression::Index(<>)),
    <Expression> "(" <ArgumentList> ")" => Box::new(Expression::Call(<>)),

    #[precedence(level="2")]
    #[assoc(side="left")]
    <l:Expression> "==" <r:Expression> => Box::new(Expression::Binary(l, Operation::Equals, r)),
    <l:Expression> ">" <r:Expression> => Box::new(Expression::Binary(l, Operation::GraterThan, r)),
    <l:Expression> "<" <r:Expression> => Box::new(Expression::Binary(l, Operation::LessThan, r)),
    <l:Expression> ">=" <r:Expression> => Box::new(Expression::Binary(l, Operation::GraterThanEquals, r)),
    <l:Expression> "<=" <r:Expression> => Box::new(Expression::Binary(l, Operation::LessThanEquals, r)),

    #[precedence(level="3")]
    #[assoc(side="left")]
    <l:Expression> "*" <r:Expression> => Box::new(Expression::Binary(l, Operation::Multiply, r)),
    <l:Expression> "/" <r:Expression> => Box::new(Expression::Binary(l, Operation::Divide, r)),

    #[precedence(level="4")]
    #[assoc(side="left")]
    <l:Expression> "+" <r:Expression> => Box::new(Expression::Binary(l, Operation::Add, r)),
    <l:Expression> "-" <r:Expression> => Box::new(Expression::Binary(l, Operation::Subtract, r)),
}

ArgumentList: Vec<Box<Expression>> = {
    <arguments: (<Expression> ",")*> <last: Expression?> => {
        let mut arguments = arguments;
        arguments.extend(last);
        arguments
    }
}

Term: Box<Expression> = {
    "function" "(" <parameters:ParameterList> ")" <body: (<Statement>)*> "end" =>
        Box::new(Expression::Function(parameters, body)),

    <n:Number> => Box::new(Expression::Term(Term::Number(n))),
    <s:String> => Box::new(Expression::Term(Term::String(s))),
    <b:Boolean> => Box::new(Expression::Term(Term::Boolean(b))),
    <v:Identifier> => Box::new(Expression::Term(Term::Variable(v))),
    <t:TableLiteral> => t,
}

ParameterList: Vec<String> = {
    <parameters: (<Identifier> ",")*> <last:Identifier?> => {
        let mut parameters = parameters;
        parameters.extend(last);
        parameters
    },
}

TableIndex: TableConstructionIndex = {
    "[" <Expression> "]" => TableConstructionIndex::Value(<>),
    <Identifier> => TableConstructionIndex::Name(<>),
}

TableItem = <(<TableIndex> "=")?> <Expression>;
TableLiteral: Box<Expression> = {
    "{" <items: (<TableItem> ",")*> <last: (<TableItem>)?> "}" => {
        let mut items = items;
        items.extend(last);
        Box::new(Expression::Term(Term::Table(items)))
    },
}

Boolean: bool = {
    "true" => true,
    "false" => false,
}

Number: f64 = <s:r"(\d+\.\d*)|(\d*\.\d+)|(\d+)"> => f64::from_str(s).unwrap();
String: String = <s:r#""[^"]*""#> => s[1..s.len()-1].to_owned();
Identifier: String = <s:r"[a-zA-Z_][a-zA-Z0-9_]*"> => s.to_owned();

match {
    r"\s*" => {},
    r"--.*\n" => {},
} else {
    _
}
